.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PcapUtils 3pm"
.TH PcapUtils 3pm "1999-04-07" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"Net::PcapUtils" \- Utility routines for Net::Pcap module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  require Net::Pcap 0.03;
\&  use Net::PcapUtils;
\&
\&  # Call function for all packets received
\&
\&  Net::PcapUtils::loop(\e&callbackfn, [optional args]);
\&
\&  # Return the next packet available on the interface
\&
\&  ($pkt, %hdr) = Net::PcapUtils::next($pcap_t);
\&
\&  # Open a network device for processing
\&
\&  $pcap_t = Net::PcapUtils::open([optional args]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::PcapUtils is a module to sit in front of Net::Pcap in order to
hide some of the \fIpcap\fR\|(3) initialisation by providing sensible
defaults.  This enables a programmer to easily write small, specific
scripts for a particular purpose without having to worry about too
many details.
.PP
The functions implemented in Net::PcapUtils are named after those in
Net::Pcap.  The \fBloop\fR function sits in a loop and executes a
callback for each packet received, while \fBnext\fR retrieves the next
packet from the network device, and \fBopen\fR returns an opened packet
descriptor suitable for use with other Net::Pcap routines.
.SS "Functions"
.IX Subsection "Functions"
.IP "\fBNet::PcapUtils::loop(\e&callback_fn, [\s-1ARG\s0 => value]);\fR" 4
.IX Item "Net::PcapUtils::loop(&callback_fn, [ARG => value]);"
Given a callback function and a list of optional named parameterss,
open a network interface, configure it, and execute the callback
function for each packet received on the interface.  If the \s-1SAVEFILE\s0
parameter is present, a saved file of that name will be opened for
reading, else the network interface specified by the \s-1DEV\s0 parameter
will be opened.  If no saved file or device is specified, the
interface returned by \fINet::Pcap::lookupdev()\fR is opened.
.Sp
The optional arguments are those which are normally passed to the
\&\fIpcap_open_live()\fR function from the \fIpcap\fR\|(3) library.  Their defaults
are given below.
.Sp
.Vb 10
\&    my %args = (
\&        SNAPLEN => 100,         # Num bytes to capture from packet
\&        PROMISC => 1,           # Operate in promiscuous mode?
\&        TIMEOUT => 1000,        # Read timeout (ms)
\&        NUMPACKETS => \-1,       # Pkts to read (\-1 = loop forever)
\&        FILTER => \*(Aq\*(Aq,           # Filter string
\&        USERDATA => \*(Aq\*(Aq,         # Passed as first arg to callback fn
\&        SAVEFILE => \*(Aq\*(Aq,         # Default save file
\&        DEV => \*(Aq\*(Aq,              # Network interface to open
\&        );
.Ve
.Sp
Consult the documentation for the \fIpcap\fR\|(3) library for more details on
the nature of these parameters.
.Sp
On error, this function returns an error string describing the error.
An empty string is returned upon success.
.IP "\fBNet::PcapUtils::open([\s-1ARG\s0 => value]);\fR" 4
.IX Item "Net::PcapUtils::open([ARG => value]);"
Return a packet capture descriptor.  The optional arguments passed to
this function are the same as those which can be passed to
\&\fINet::PcapUtils::loop()\fR.
.Sp
If the \fIopen()\fR command was successful, it returns a reference to a
packet capture descriptor, else a string containing an error message.
.IP "\fBNet::PcapUtils::next($pcap_t);\fR" 4
.IX Item "Net::PcapUtils::next($pcap_t);"
Return the next packet available on the interface specified by packet
capture descriptor \f(CW$pcap_t\fR.  This may be obtained from the
\&\fINet::PcapUtils::open()\fR function, \fINet::Pcap::open_live()\fR or
\&\fINet::Pcap::open_offline()\fR.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
The following script prints a message for each \s-1IP\s0 packet received.
.PP
.Vb 1
\&  #!/usr/bin/perl \-w
\&
\&  use strict;
\&  use Net::PcapUtils;
\&
\&  sub process_pkt {
\&      print("packet\en");
\&  }
\&
\&  Net::PcapUtils::loop(\e&process_pkt, FILTER => \*(Aqip\*(Aq);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \f(CW\*(C`Net::Pcap\*(C'\fR module for \s-1XS\s0 bindings to the \f(CWpcap(3)\fR library.
.PP
The pcap library is available from ftp://ftp.ee.lbl.gov/libpcap.tar.Z
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 3
\&  Copyright (c) 1995,1996,1997,1998,1999 ANU and CSIRO on behalf of
\&  the participants in the CRC for Advanced Computational Systems
\&  (\*(AqACSys\*(Aq).
\&
\&  ACSys makes this software and all associated data and documentation
\&  (\*(AqSoftware\*(Aq) available free of charge.  You may make copies of the 
\&  Software but you must include all of this notice on any copy.
\&
\&  The Software was developed for research purposes and ACSys does not
\&  warrant that it is error free or fit for any purpose.  ACSys
\&  disclaims any liability for all claims, expenses, losses, damages
\&  and costs any user may incur as a result of using, copying or
\&  modifying the Software.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Potter <tpot@acsys.anu.edu.au>
